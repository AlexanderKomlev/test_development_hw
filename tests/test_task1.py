from unittest import TestCase
from task1 import get_unique_name, get_course, get_top_names


import pytest


class TestTask1(TestCase):
    def test_unique_name(self):
        
        expected = 'Адилет, Азамат, Александр, Алексей, Алена, Анатолий, Анна, Антон, Вадим, Валерий, Владимир, Денис, Дмитрий, Евгений, Елена, Иван, Илья, Кирилл, Константин, Максим, Михаил, Никита, Николай, Олег, Павел, Ринат, Роман, Сергей, Татьяна, Тимур, Филипп, Эдгар, Юрий'
        result = get_unique_name()
        self.assertEqual(result, expected)

@pytest.mark.parametrize("durations", ([30, 40, 13, 21], [18, 26, 32, 7]))
def test_func(durations):
    result = get_course(durations).split('\n')
    min_value = min(durations)
    max_value = max(durations)
    assert str(min_value) in result[0] and str(max_value) in result[1]


test_case_1 = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Бардин", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Олег Булыгин", "Кирилл Табельский","Роман Гордиенко", "Адилет Асканжоев", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен","Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
test_case_2 = [
        ["Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Бардин", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Олег Булыгин", "Кирилл Табельский", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
    ]
test_case_3 = [
        ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
        ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
        ["Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Елена Никитина"],
        ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Алена Батицкая", "Николай Лопин", "Михаил Ларченко"]
    ]

@pytest.mark.parametrize("mentors, expected_name, expected_repeats", [
        (test_case_1, ['Евгений', 'Денис', 'Александр'], [4, 3, 2]),
        (test_case_2, ['Александр', 'Денис', 'Максим'], [4, 3, 3]),
        (test_case_3, ['Александр', 'Евгений', 'Алена'], [5, 3, 2]),
        ])
def test_func2(mentors, expected_name, expected_repeats):
    result = get_top_names(mentors)
    expected_string = f'{expected_name[0]}: {expected_repeats[0]} раз(а), {expected_name[1]}: {expected_repeats[1]} раз(а), {expected_name[2]}: {expected_repeats[2]} раз(а)'
    assert result == expected_string
